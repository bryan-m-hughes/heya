"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
The MIT License (MIT)

Copyright (c) 2015 Bryan Hughes <bryan@theoreticalideations.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

var EventEmitter = require("events").EventEmitter;

var gamepad = _interopRequire(require("gamepad"));

var inputTypes = require("../../constants.js").inputTypes;

var createController = require("../controller.js").createController;

var logger = _interopRequire(require("../../logging.js"));

var options = Symbol("options");
var deviceId = Symbol("deviceId");
var axisInputMap = Symbol("axisInputMap");
var buttonInputMap = Symbol("buttonInputMap");
var createAnalog1DInput = Symbol("handleAnalog1DInput");
var createAnalog2DInput = Symbol("createAnalog2DInput");
var createButtonInput = Symbol("createButtonInput");

var Gamepad = createController((function () {
  var _createController = {

    name: "Gamepad",

    constants: {
      CYBORG_EVO: {
        axes: {
          primary: [0, 1],
          yaw: [2],
          throttle: [3]
        },
        buttons: {
          trigger: 0,
          button1: 1,
          button2: 2,
          button3: 3,
          p1: 6
        }
      },
      XBOX_360: {
        axes: {
          leftThumbstick: [0, 1],
          rightThumbstick: [2, 3]
        },
        buttons: {}
      }
    },

    initialize: function initialize(opts) {
      this[options] = opts;

      if (!opts || !opts.type || typeof opts.type.axes !== "object" || typeof opts.type.buttons != "object") {
        throw new Error("The device type map was not supplied or is invalid");
      }
      var axes = opts.type.axes;
      var buttons = opts.type.buttons;

      this[deviceId] = opts.id || 0;
      logger.debug("Gamepad is listening for events from device " + this[deviceId]);

      this[axisInputMap] = [];
      this.inputs = {};

      var axis = undefined; // eslint and babel disagree on whether to use let or const inline in the for...in
      for (axis in axes) {
        if (!axes.hasOwnProperty(axis)) {
          continue;
        }
        var createHelper = undefined;
        switch (axes[axis].length) {
          case 1:
            createHelper = this[createAnalog1DInput];
            break;
          case 2:
            createHelper = this[createAnalog2DInput];
            break;
          default:
            throw new Error("Axis maps must have 1 or 2 entries, not " + axes[axis].length);
        }
        this.inputs[axis] = createHelper.call(this, axes[axis]);
      }

      var button = undefined;
      for (button in buttons) {
        if (!axes.hasOwnProperty(axis)) {
          continue;
        }
        this.inputs[button] = this[createButtonInput](button);
      }
    } };

  _defineProperty(_createController, createAnalog1DInput, function (axisMap) {
    var emitter = Object.assign(new EventEmitter(), {
      type: inputTypes.ANALOG_1D_DIRECTION,
      updateValue: function updateValue(axis, newValue) {
        this.emit("change", newValue);
      }
    });
    this[axisInputMap][axisMap[0]] = emitter;
    return emitter;
  });

  _defineProperty(_createController, createAnalog2DInput, function (axesMap) {
    var currentValue = {
      x: 0,
      y: 0
    };
    var emitter = Object.assign(new EventEmitter(), {
      type: inputTypes.ANALOG_2D_DIRECTION,
      updateValue: function updateValue(axis, newValue) {
        if (axis == axesMap[0]) {
          currentValue.x = newValue;
        } else {
          currentValue.y = newValue;
        }
        this.emit("change", currentValue);
      }
    });
    this[axisInputMap][axesMap[0]] = emitter;
    this[axisInputMap][axesMap[1]] = emitter;
    return emitter;
  });

  _defineProperty(_createController, createButtonInput, function (num) {
    var emitter = Object.assign(new EventEmitter(), {
      type: inputTypes.BINARY_STATE,
      setValue: function setValue() {
        this.emit("change", true);
      },
      clearValue: function clearValue() {
        this.emit("change", false);
      }
    });
    this[buttonInputMap][num] = emitter;
    return emitter;
  });

  _defineProperty(_createController, "connect", function connect(cb) {
    var _this = this;

    // Initialize the library
    gamepad.init();

    // List the state of all currently attached devices
    for (var i = 0; i < gamepad.numDevices(); i++) {
      logger.debug("Found gamepad device " + gamepad.deviceAtIndex(i));
    }

    // Create a game loop and poll for events
    setInterval(gamepad.processEvents, 16);

    // Scan for new gamepads as a slower rate
    setInterval(gamepad.detectDevices, 500);

    // Listen for move events on all gamepads
    gamepad.on("move", function (id, axis, value) {
      if (id != _this[deviceId]) {
        return;
      }
      if (_this[axisInputMap][axis]) {
        _this[axisInputMap][axis].updateValue(axis, value);
      }
    });

    // Listen for button up events on all gamepads
    gamepad.on("up", function (id, num) {
      if (id != _this[deviceId]) {
        return;
      }
      if (_this[buttonInputMap][num]) {
        _this[buttonInputMap][num].setValue();
      }
    });

    // Listen for button down events on all gamepads
    gamepad.on("down", function (id, num) {
      if (id != _this[deviceId]) {
        return;
      }
      if (_this[buttonInputMap][num]) {
        _this[buttonInputMap][num].clearValue();
      }
    });

    cb();

    /*
    down { id: 0, num: 1 }
    up { id: 0, num: 1 }
    down { id: 0, num: 3 }
    up { id: 0, num: 3 }
    down { id: 0, num: 2 }
    up { id: 0, num: 2 }
    move { id: 0, axis: 1, value: 0.004887580871582031 }
    move { id: 0, axis: 1, value: 0.008797645568847656 }
    move { id: 0, axis: 1, value: 0.010752677917480469 }
    */
  });

  return _createController;
})());
exports.Gamepad = Gamepad;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2dhbWVwYWQvZ2FtZXBhZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUF3QlMsWUFBWSxXQUFRLFFBQVEsRUFBNUIsWUFBWTs7SUFDZCxPQUFPLDJCQUFNLFNBQVM7O0lBQ3BCLFVBQVUsV0FBUSxvQkFBb0IsRUFBdEMsVUFBVTs7SUFDVixnQkFBZ0IsV0FBUSxrQkFBa0IsRUFBMUMsZ0JBQWdCOztJQUNsQixNQUFNLDJCQUFNLGtCQUFrQjs7QUFFckMsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxJQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDNUMsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDaEQsSUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUMxRCxJQUFNLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzFELElBQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7O0FBRS9DLElBQU0sT0FBTyxHQUFHLGdCQUFnQjs7O0FBRXJDLFVBQU0sU0FBUzs7QUFFZixlQUFXO0FBQ1QsZ0JBQVUsRUFBRTtBQUNWLFlBQUksRUFBRTtBQUNKLGlCQUFPLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFO0FBQ2pCLGFBQUcsRUFBRSxDQUFFLENBQUMsQ0FBRTtBQUNWLGtCQUFRLEVBQUUsQ0FBRSxDQUFDLENBQUU7U0FDaEI7QUFDRCxlQUFPLEVBQUU7QUFDUCxpQkFBTyxFQUFFLENBQUM7QUFDVixpQkFBTyxFQUFFLENBQUM7QUFDVixpQkFBTyxFQUFFLENBQUM7QUFDVixpQkFBTyxFQUFFLENBQUM7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SyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztPQUN0QztLQUNGLENBQUMsQ0FBQzs7O0FBR0gsV0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFLO0FBQzlCLFVBQUksRUFBRSxJQUFJLE1BQUssUUFBUSxDQUFDLEVBQUU7QUFDeEIsZUFBTztPQUNSO0FBQ0QsVUFBSSxNQUFLLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzdCLGNBQUssY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7T0FDeEM7S0FDRixDQUFDLENBQUM7O0FBRUgsTUFBRSxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7R0FhTjs7O0tBQ0QsQ0FBQztRQWhMVSxPQUFPLEdBQVAsT0FBTyIsImZpbGUiOiJjb250cm9sbGVycy9nYW1lcGFkL2dhbWVwYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbkNvcHlyaWdodCAoYykgMjAxNSBCcnlhbiBIdWdoZXMgPGJyeWFuQHRoZW9yZXRpY2FsaWRlYXRpb25zLmNvbT5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuVEhFIFNPRlRXQVJFLlxuKi9cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCBnYW1lcGFkIGZyb20gJ2dhbWVwYWQnO1xuaW1wb3J0IHsgaW5wdXRUeXBlcyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVDb250cm9sbGVyIH0gZnJvbSAnLi4vY29udHJvbGxlci5qcyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uLy4uL2xvZ2dpbmcuanMnO1xuXG5jb25zdCBvcHRpb25zID0gU3ltYm9sKCdvcHRpb25zJyk7XG5jb25zdCBkZXZpY2VJZCA9IFN5bWJvbCgnZGV2aWNlSWQnKTtcbmNvbnN0IGF4aXNJbnB1dE1hcCA9IFN5bWJvbCgnYXhpc0lucHV0TWFwJyk7XG5jb25zdCBidXR0b25JbnB1dE1hcCA9IFN5bWJvbCgnYnV0dG9uSW5wdXRNYXAnKTtcbmNvbnN0IGNyZWF0ZUFuYWxvZzFESW5wdXQgPSBTeW1ib2woJ2hhbmRsZUFuYWxvZzFESW5wdXQnKTtcbmNvbnN0IGNyZWF0ZUFuYWxvZzJESW5wdXQgPSBTeW1ib2woJ2NyZWF0ZUFuYWxvZzJESW5wdXQnKTtcbmNvbnN0IGNyZWF0ZUJ1dHRvbklucHV0ID0gU3ltYm9sKCdjcmVhdGVCdXR0b25JbnB1dCcpO1xuXG5leHBvcnQgY29uc3QgR2FtZXBhZCA9IGNyZWF0ZUNvbnRyb2xsZXIoe1xuXG4gIG5hbWU6ICdHYW1lcGFkJyxcblxuICBjb25zdGFudHM6IHtcbiAgICBDWUJPUkdfRVZPOiB7XG4gICAgICBheGVzOiB7XG4gICAgICAgIHByaW1hcnk6IFsgMCwgMSBdLFxuICAgICAgICB5YXc6IFsgMiBdLFxuICAgICAgICB0aHJvdHRsZTogWyAzIF1cbiAgICAgIH0sXG4gICAgICBidXR0b25zOiB7XG4gICAgICAgIHRyaWdnZXI6IDAsXG4gICAgICAgIGJ1dHRvbjE6IDEsXG4gICAgICAgIGJ1dHRvbjI6IDIsXG4gICAgICAgIGJ1dHRvbjM6IDMsXG4gICAgICAgIHAxOiA2XG4gICAgICB9XG4gICAgfSxcbiAgICBYQk9YXzM2MDoge1xuICAgICAgYXhlczoge1xuICAgICAgICBsZWZ0VGh1bWJzdGljazogWyAwLCAxIF0sXG4gICAgICAgIHJpZ2h0VGh1bWJzdGljazogWyAyLCAzIF1cbiAgICAgIH0sXG4gICAgICBidXR0b25zOiB7fVxuICAgIH1cbiAgfSxcblxuICBpbml0aWFsaXplKG9wdHMpIHtcbiAgICB0aGlzW29wdGlvbnNdID0gb3B0cztcblxuICAgIGlmICghb3B0cyB8fCAhb3B0cy50eXBlIHx8IHR5cGVvZiBvcHRzLnR5cGUuYXhlcyAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdHMudHlwZS5idXR0b25zICE9ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBkZXZpY2UgdHlwZSBtYXAgd2FzIG5vdCBzdXBwbGllZCBvciBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIGNvbnN0IGF4ZXMgPSBvcHRzLnR5cGUuYXhlcztcbiAgICBjb25zdCBidXR0b25zID0gb3B0cy50eXBlLmJ1dHRvbnM7XG5cbiAgICB0aGlzW2RldmljZUlkXSA9IG9wdHMuaWQgfHwgMDtcbiAgICBsb2dnZXIuZGVidWcoYEdhbWVwYWQgaXMgbGlzdGVuaW5nIGZvciBldmVudHMgZnJvbSBkZXZpY2UgJHt0aGlzW2RldmljZUlkXX1gKTtcblxuICAgIHRoaXNbYXhpc0lucHV0TWFwXSA9IFtdO1xuICAgIHRoaXMuaW5wdXRzID0ge307XG5cbiAgICBsZXQgYXhpczsgLy8gZXNsaW50IGFuZCBiYWJlbCBkaXNhZ3JlZSBvbiB3aGV0aGVyIHRvIHVzZSBsZXQgb3IgY29uc3QgaW5saW5lIGluIHRoZSBmb3IuLi5pblxuICAgIGZvciAoYXhpcyBpbiBheGVzKSB7XG4gICAgICBpZiAoIWF4ZXMuaGFzT3duUHJvcGVydHkoYXhpcykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBsZXQgY3JlYXRlSGVscGVyO1xuICAgICAgc3dpdGNoIChheGVzW2F4aXNdLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgY3JlYXRlSGVscGVyID0gdGhpc1tjcmVhdGVBbmFsb2cxRElucHV0XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNyZWF0ZUhlbHBlciA9IHRoaXNbY3JlYXRlQW5hbG9nMkRJbnB1dF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBeGlzIG1hcHMgbXVzdCBoYXZlIDEgb3IgMiBlbnRyaWVzLCBub3QgJyArIGF4ZXNbYXhpc10ubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5wdXRzW2F4aXNdID0gY3JlYXRlSGVscGVyLmNhbGwodGhpcywgYXhlc1theGlzXSk7XG4gICAgfVxuXG4gICAgbGV0IGJ1dHRvbjtcbiAgICBmb3IgKGJ1dHRvbiBpbiBidXR0b25zKSB7XG4gICAgICBpZiAoIWF4ZXMuaGFzT3duUHJvcGVydHkoYXhpcykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLmlucHV0c1tidXR0b25dID0gdGhpc1tjcmVhdGVCdXR0b25JbnB1dF0oYnV0dG9uKTtcbiAgICB9XG4gIH0sXG5cbiAgW2NyZWF0ZUFuYWxvZzFESW5wdXRdKGF4aXNNYXApIHtcbiAgICBjb25zdCBlbWl0dGVyID0gT2JqZWN0LmFzc2lnbihuZXcgRXZlbnRFbWl0dGVyKCksIHtcbiAgICAgIHR5cGU6IGlucHV0VHlwZXMuQU5BTE9HXzFEX0RJUkVDVElPTixcbiAgICAgIHVwZGF0ZVZhbHVlKGF4aXMsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgbmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXNbYXhpc0lucHV0TWFwXVtheGlzTWFwWzBdXSA9IGVtaXR0ZXI7XG4gICAgcmV0dXJuIGVtaXR0ZXI7XG4gIH0sXG5cbiAgW2NyZWF0ZUFuYWxvZzJESW5wdXRdKGF4ZXNNYXApIHtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gICAgY29uc3QgZW1pdHRlciA9IE9iamVjdC5hc3NpZ24obmV3IEV2ZW50RW1pdHRlcigpLCB7XG4gICAgICB0eXBlOiBpbnB1dFR5cGVzLkFOQUxPR18yRF9ESVJFQ1RJT04sXG4gICAgICB1cGRhdGVWYWx1ZShheGlzLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAoYXhpcyA9PSBheGVzTWFwWzBdKSB7XG4gICAgICAgICAgY3VycmVudFZhbHVlLnggPSBuZXdWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50VmFsdWUueSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgY3VycmVudFZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzW2F4aXNJbnB1dE1hcF1bYXhlc01hcFswXV0gPSBlbWl0dGVyO1xuICAgIHRoaXNbYXhpc0lucHV0TWFwXVtheGVzTWFwWzFdXSA9IGVtaXR0ZXI7XG4gICAgcmV0dXJuIGVtaXR0ZXI7XG4gIH0sXG5cbiAgW2NyZWF0ZUJ1dHRvbklucHV0XShudW0pIHtcbiAgICBjb25zdCBlbWl0dGVyID0gT2JqZWN0LmFzc2lnbihuZXcgRXZlbnRFbWl0dGVyKCksIHtcbiAgICAgIHR5cGU6IGlucHV0VHlwZXMuQklOQVJZX1NUQVRFLFxuICAgICAgc2V0VmFsdWUoKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgdHJ1ZSk7XG4gICAgICB9LFxuICAgICAgY2xlYXJWYWx1ZSgpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGFuZ2UnLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpc1tidXR0b25JbnB1dE1hcF1bbnVtXSA9IGVtaXR0ZXI7XG4gICAgcmV0dXJuIGVtaXR0ZXI7XG4gIH0sXG5cbiAgY29ubmVjdChjYikge1xuICAgIC8vIEluaXRpYWxpemUgdGhlIGxpYnJhcnlcbiAgICBnYW1lcGFkLmluaXQoKTtcblxuICAgIC8vIExpc3QgdGhlIHN0YXRlIG9mIGFsbCBjdXJyZW50bHkgYXR0YWNoZWQgZGV2aWNlc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2FtZXBhZC5udW1EZXZpY2VzKCk7IGkrKykge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBGb3VuZCBnYW1lcGFkIGRldmljZSAke2dhbWVwYWQuZGV2aWNlQXRJbmRleChpKX1gKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBnYW1lIGxvb3AgYW5kIHBvbGwgZm9yIGV2ZW50c1xuICAgIHNldEludGVydmFsKGdhbWVwYWQucHJvY2Vzc0V2ZW50cywgMTYpO1xuXG4gICAgLy8gU2NhbiBmb3IgbmV3IGdhbWVwYWRzIGFzIGEgc2xvd2VyIHJhdGVcbiAgICBzZXRJbnRlcnZhbChnYW1lcGFkLmRldGVjdERldmljZXMsIDUwMCk7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIG1vdmUgZXZlbnRzIG9uIGFsbCBnYW1lcGFkc1xuICAgIGdhbWVwYWQub24oJ21vdmUnLCAoaWQsIGF4aXMsIHZhbHVlKSA9PiB7XG4gICAgICBpZiAoaWQgIT0gdGhpc1tkZXZpY2VJZF0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXNbYXhpc0lucHV0TWFwXVtheGlzXSkge1xuICAgICAgICB0aGlzW2F4aXNJbnB1dE1hcF1bYXhpc10udXBkYXRlVmFsdWUoYXhpcywgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTGlzdGVuIGZvciBidXR0b24gdXAgZXZlbnRzIG9uIGFsbCBnYW1lcGFkc1xuICAgIGdhbWVwYWQub24oJ3VwJywgKGlkLCBudW0pID0+IHtcbiAgICAgIGlmIChpZCAhPSB0aGlzW2RldmljZUlkXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpc1tidXR0b25JbnB1dE1hcF1bbnVtXSkge1xuICAgICAgICB0aGlzW2J1dHRvbklucHV0TWFwXVtudW1dLnNldFZhbHVlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIGJ1dHRvbiBkb3duIGV2ZW50cyBvbiBhbGwgZ2FtZXBhZHNcbiAgICBnYW1lcGFkLm9uKCdkb3duJywgKGlkLCBudW0pID0+IHtcbiAgICAgIGlmIChpZCAhPSB0aGlzW2RldmljZUlkXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpc1tidXR0b25JbnB1dE1hcF1bbnVtXSkge1xuICAgICAgICB0aGlzW2J1dHRvbklucHV0TWFwXVtudW1dLmNsZWFyVmFsdWUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNiKCk7XG5cbiAgICAvKlxuICAgIGRvd24geyBpZDogMCwgbnVtOiAxIH1cbiAgICB1cCB7IGlkOiAwLCBudW06IDEgfVxuICAgIGRvd24geyBpZDogMCwgbnVtOiAzIH1cbiAgICB1cCB7IGlkOiAwLCBudW06IDMgfVxuICAgIGRvd24geyBpZDogMCwgbnVtOiAyIH1cbiAgICB1cCB7IGlkOiAwLCBudW06IDIgfVxuICAgIG1vdmUgeyBpZDogMCwgYXhpczogMSwgdmFsdWU6IDAuMDA0ODg3NTgwODcxNTgyMDMxIH1cbiAgICBtb3ZlIHsgaWQ6IDAsIGF4aXM6IDEsIHZhbHVlOiAwLjAwODc5NzY0NTU2ODg0NzY1NiB9XG4gICAgbW92ZSB7IGlkOiAwLCBheGlzOiAxLCB2YWx1ZTogMC4wMTA3NTI2Nzc5MTc0ODA0NjkgfVxuICAgICovXG4gIH1cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9